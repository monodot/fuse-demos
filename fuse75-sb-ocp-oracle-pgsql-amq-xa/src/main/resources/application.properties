# By simply setting these values, Spring Boot will create an ActiveMQ connection factory
# We will then attach this connection factory to a Camel JmsComponent (see Application.java)
spring.activemq.broker-url=tcp://localhost:61616
spring.activemq.user=admin
spring.activemq.password=admin

# More autoconfiguration magic.... Spring Boot will create a datasource for us with these properties
spring.datasource.url=jdbc:postgresql://localhost:5432/sampledb
spring.datasource.username=admin
spring.datasource.password=admin

# No autoconfig magic here. Just some properties we'll use to manually create our Oracle connection
oracle.url=jdbc:oracle:thin:@localhost:1521:ORCLCDB
oracle.username=scott
oracle.password=tiger

#debug=true

logging.level.org.apache.camel.component.jms=DEBUG

# Cluster (options replaced by Openshift env variables)
cluster.name=@project.artifactId@
cluster.nodename=${cluster.name}-0
cluster.base-dir=./target/tx
# Recovery is enabled only inside Openshift
cluster.recovery.enabled=false

# Transaction data
spring.jta.transaction-manager-id=${cluster.nodename}
spring.jta.log-dir=${cluster.base-dir}/store/${cluster.nodename}

# Transaction recovery settings
snowdrop.narayana.openshift.recovery.enabled=${cluster.recovery.enabled}
snowdrop.narayana.openshift.recovery.current-pod-name=${cluster.nodename}
snowdrop.narayana.openshift.recovery.statefulset=${cluster.name}
snowdrop.narayana.openshift.recovery.status-dir=${cluster.base-dir}/status
